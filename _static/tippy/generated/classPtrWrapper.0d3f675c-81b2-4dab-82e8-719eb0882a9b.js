selector_to_html = {"a[href=\"#_CPPv4N10PtrWrapperD0Ev\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapperD0Ev\">\n<span id=\"_CPPv3N10PtrWrapperD0Ev\"></span><span id=\"_CPPv2N10PtrWrapperD0Ev\"></span><span id=\"PtrWrapper::~PtrWrapper\"></span><span class=\"target\" id=\"classPtrWrapper_1ac7fc7e7dd1b0b5bdea0a51e8ff453aa6\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~PtrWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK10PtrWrappermlEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK10PtrWrappermlEv\">\n<span id=\"_CPPv3NK10PtrWrappermlEv\"></span><span id=\"_CPPv2NK10PtrWrappermlEv\"></span><span id=\"PtrWrapper::mul-operatorC\"></span><span class=\"target\" id=\"classPtrWrapper_1a3410ac1315d59a75fcef356a76349ab4\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">*</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK10PtrWrappercvP1TEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK10PtrWrappercvP1TEv\">\n<span id=\"_CPPv3NK10PtrWrappercvP1TEv\"></span><span id=\"_CPPv2NK10PtrWrappercvP1TEv\"></span><span id=\"PtrWrapper::castto-TP-operatorC\"></span><span class=\"target\" id=\"classPtrWrapper_1a33f31d36ce7a973d2cea338090e0054a\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><span><span class=\"k\"><span class=\"pre\">explicit</span></span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">*</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapper10PtrWrapperEP1TNSt8functionIFvP1TEEE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapper10PtrWrapperEP1TNSt8functionIFvP1TEEE\">\n<span id=\"_CPPv3N10PtrWrapper10PtrWrapperEP1TNSt8functionIFvP1TEEE\"></span><span id=\"_CPPv2N10PtrWrapper10PtrWrapperEP1TNSt8functionIFvP1TEEE\"></span><span class=\"target\" id=\"classPtrWrapper_1a684838153d810d18335b754e054abadb\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperEP1TNSt8functionIFvP1TEEE\" title=\"PtrWrapper::PtrWrapper::ptr (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">ptr</span></span></a>, </span><span class=\"sig-param-decl\"><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/cpp/utility/functional/function\" title=\"std::function (C++11 standard class)\"><span class=\"n\"><span class=\"pre\">function</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperEP1TNSt8functionIFvP1TEEE\" title=\"PtrWrapper::PtrWrapper::deallocator (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">deallocator</span></span></a></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapper10PtrWrapperEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapper10PtrWrapperEv\">\n<span id=\"_CPPv3N10PtrWrapper10PtrWrapperEv\"></span><span id=\"_CPPv2N10PtrWrapper10PtrWrapperEv\"></span><span id=\"PtrWrapper::PtrWrapper\"></span><span class=\"target\" id=\"classPtrWrapper_1af7e06993bc00d8fed31ae1a3568a3486\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapper10PtrWrapperERK10PtrWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapper10PtrWrapperERK10PtrWrapper\">\n<span id=\"_CPPv3N10PtrWrapper10PtrWrapperERK10PtrWrapper\"></span><span id=\"_CPPv2N10PtrWrapper10PtrWrapperERK10PtrWrapper\"></span><span id=\"PtrWrapper::PtrWrapper__PtrWrapperCR\"></span><span class=\"target\" id=\"classPtrWrapper_1ad23483a5d6279a5a721d88003696fba7\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperERK10PtrWrapper\" title=\"PtrWrapper::PtrWrapper (C++ function)\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">delete</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapper10PtrWrapperERR10PtrWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapper10PtrWrapperERR10PtrWrapper\">\n<span id=\"_CPPv3N10PtrWrapper10PtrWrapperERR10PtrWrapper\"></span><span id=\"_CPPv2N10PtrWrapper10PtrWrapperERR10PtrWrapper\"></span><span id=\"PtrWrapper::PtrWrapper__PtrWrapperRR\"></span><span class=\"target\" id=\"classPtrWrapper_1ac015ff7b53ab0941f4b0968e6b7a275e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperERR10PtrWrapper\" title=\"PtrWrapper::PtrWrapper (C++ function)\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperERR10PtrWrapper\" title=\"PtrWrapper::PtrWrapper::other (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">other</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4I0E10PtrWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4I0E10PtrWrapper\">\n<span id=\"_CPPv3I0E10PtrWrapper\"></span><span id=\"_CPPv2I0E10PtrWrapper\"></span><span class=\"k\"><span class=\"pre\">template</span></span><span class=\"p\"><span class=\"pre\">&lt;</span></span><span><span class=\"k\"><span class=\"pre\">typename</span></span><span class=\"w\"> </span><span class=\"sig-name descname sig-name-nonprimary\"><a class=\"desctype n reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a></span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><br/><span class=\"target\" id=\"classPtrWrapper\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></span><br/></dt><dd><p>A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope. </p><p>Intended for use in situations where shared_ptr can\u2019t be used, such as when the resource is not allocated with <code class=\"docutils literal notranslate\"><span class=\"pre\">new</span></code></p></dd>", "a[href=\"#breathe-section-title-friends\"]": "<p class=\"breathe-sectiondef-title rubric\" id=\"breathe-section-title-friends\">Friends<a class=\"headerlink\" href=\"#breathe-section-title-friends\" title=\"Permalink to this headline\">\u00b6</a></p>", "a[href=\"#_CPPv4N10PtrWrapper10PtrWrapperENSt8functionIFP1TvEEENSt8functionIFvP1TEEE\"]": "<dt class=\"sig sig-object highlight sig-wrap cpp\" id=\"_CPPv4N10PtrWrapper10PtrWrapperENSt8functionIFP1TvEEENSt8functionIFvP1TEEE\">\n<span id=\"_CPPv3N10PtrWrapper10PtrWrapperENSt8functionIFP1TvEEENSt8functionIFvP1TEEE\"></span><span id=\"_CPPv2N10PtrWrapper10PtrWrapperENSt8functionIFP1TvEEENSt8functionIFvP1TEEE\"></span><span class=\"target\" id=\"classPtrWrapper_1a94c45b9c64748d391de0f2e7f66b4027\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/cpp/utility/functional/function\" title=\"std::function (C++11 standard class)\"><span class=\"n\"><span class=\"pre\">function</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperENSt8functionIFP1TvEEENSt8functionIFvP1TEEE\" title=\"PtrWrapper::PtrWrapper::allocator (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">allocator</span></span></a>, </span><span class=\"sig-param-decl\"><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/cpp/utility/functional/function\" title=\"std::function (C++11 standard class)\"><span class=\"n\"><span class=\"pre\">function</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">(</span></span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper10PtrWrapperENSt8functionIFP1TvEEENSt8functionIFvP1TEEE\" title=\"PtrWrapper::PtrWrapper::deallocator (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">deallocator</span></span></a></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapperaSE10PtrWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapperaSE10PtrWrapper\">\n<span id=\"_CPPv3N10PtrWrapperaSE10PtrWrapper\"></span><span id=\"_CPPv2N10PtrWrapperaSE10PtrWrapper\"></span><span id=\"PtrWrapper::assign-operator__PtrWrapper\"></span><span class=\"target\" id=\"classPtrWrapper_1a64208d705683c3113001e928df318126\"></span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">delete</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapperaSERR10PtrWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapperaSERR10PtrWrapper\">\n<span id=\"_CPPv3N10PtrWrapperaSERR10PtrWrapper\"></span><span id=\"_CPPv2N10PtrWrapperaSERR10PtrWrapper\"></span><span id=\"PtrWrapper::assign-operator__PtrWrapperRR\"></span><span class=\"target\" id=\"classPtrWrapper_1a250b9e0bb40c483daa21ba5d3d0b47af\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapperaSERR10PtrWrapper\" title=\"PtrWrapper::operator=::other (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">other</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK10PtrWrapperptEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK10PtrWrapperptEv\">\n<span id=\"_CPPv3NK10PtrWrapperptEv\"></span><span id=\"_CPPv2NK10PtrWrapperptEv\"></span><span id=\"PtrWrapper::pointer-operatorC\"></span><span class=\"target\" id=\"classPtrWrapper_1acd6b2ee2cddd3f2f8709c5174b6d72b0\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">-&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapperaSEP1T\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapperaSEP1T\">\n<span id=\"_CPPv3N10PtrWrapperaSEP1T\"></span><span id=\"_CPPv2N10PtrWrapperaSEP1T\"></span><span id=\"PtrWrapper::assign-operator__TP\"></span><span class=\"target\" id=\"classPtrWrapper_1a6d56a2e8b5f224ceb1f47c3c19bcaf1b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapperaSEP1T\" title=\"PtrWrapper::operator=::ptr (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">ptr</span></span></a></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapper4swapER10PtrWrapperR10PtrWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapper4swapER10PtrWrapperR10PtrWrapper\">\n<span id=\"_CPPv3N10PtrWrapper4swapER10PtrWrapperR10PtrWrapper\"></span><span id=\"_CPPv2N10PtrWrapper4swapER10PtrWrapperR10PtrWrapper\"></span><span id=\"PtrWrapper::swap__PtrWrapperR.PtrWrapperR\"></span><span class=\"target\" id=\"classPtrWrapper_1a4b70488d1af9877176b0734fa2aaab6e\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">swap</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper4swapER10PtrWrapperR10PtrWrapper\" title=\"PtrWrapper::swap::first (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">first</span></span></a>, </span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper (C++ class) \u2014 A wrapper around a pointer which will automatically deallocate the resource when it goes out of scope.\"><span class=\"n\"><span class=\"pre\">PtrWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N10PtrWrapper4swapER10PtrWrapperR10PtrWrapper\" title=\"PtrWrapper::swap::second (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">second</span></span></a></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#breathe-section-title-public-functions\"]": "<p class=\"breathe-sectiondef-title rubric\" id=\"breathe-section-title-public-functions\">Public Functions<a class=\"headerlink\" href=\"#breathe-section-title-public-functions\" title=\"Permalink to this headline\">\u00b6</a></p>", "a[href=\"#_CPPv4NK10PtrWrapper3getEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK10PtrWrapper3getEv\">\n<span id=\"_CPPv3NK10PtrWrapper3getEv\"></span><span id=\"_CPPv2NK10PtrWrapper3getEv\"></span><span id=\"PtrWrapper::getC\"></span><span class=\"target\" id=\"classPtrWrapper_1a89bb15e6f76a3b92939590475d628f04\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">virtual</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">get</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N10PtrWrapperanEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N10PtrWrapperanEv\">\n<span id=\"_CPPv3N10PtrWrapperanEv\"></span><span id=\"_CPPv2N10PtrWrapperanEv\"></span><span id=\"PtrWrapper::and-operator\"></span><span class=\"target\" id=\"classPtrWrapper_1a2053872f7a2d562961e222a790bfb280\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4I0E10PtrWrapper\" title=\"PtrWrapper::T (C++ type template parameter)\"><span class=\"n\"><span class=\"pre\">T</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"p\"><span class=\"pre\">*</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
