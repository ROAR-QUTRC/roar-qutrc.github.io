selector_to_html = {"a[href=\"#_CPPv49FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv49FdWrapper\">\n<span id=\"_CPPv39FdWrapper\"></span><span id=\"_CPPv29FdWrapper\"></span><span id=\"FdWrapper\"></span><span class=\"target\" id=\"classFdWrapper\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\"]": "<dt class=\"sig sig-object highlight sig-wrap cpp\" id=\"_CPPv4N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\">\n<span id=\"_CPPv3N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\"></span><span id=\"_CPPv2N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\"></span><span class=\"target\" id=\"classFdWrapper_1a95bb29840b6bc178aa5c396ceb033893\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/cpp/utility/functional/function\" title=\"std::function (C++11 standard class)\"><span class=\"n\"><span class=\"pre\">function</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\" title=\"FdWrapper::FdWrapper::open (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">open</span></span></a>, </span><span class=\"sig-param-decl\"><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/cpp/utility/functional/function\" title=\"std::function (C++11 standard class)\"><span class=\"n\"><span class=\"pre\">function</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\" title=\"FdWrapper::FdWrapper::configure (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">configure</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">nullptr</span></span>, </span><span class=\"sig-param-decl\"><span class=\"n\"><span class=\"pre\">std</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/cpp/utility/functional/function\" title=\"std::function (C++11 standard class)\"><span class=\"n\"><span class=\"pre\">function</span></span></a><span class=\"p\"><span class=\"pre\">&lt;</span></span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"p\"><span class=\"pre\">(</span></span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"p\"><span class=\"pre\">)</span></span><span class=\"p\"><span class=\"pre\">&gt;</span></span><span class=\"w\"> </span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper9FdWrapperENSt8functionIFivEEENSt8functionIFviEEENSt8functionIFviEEE\" title=\"FdWrapper::FdWrapper::close (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">close</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">nullptr</span></span></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK9FdWrappercviEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK9FdWrappercviEv\">\n<span id=\"_CPPv3NK9FdWrappercviEv\"></span><span id=\"_CPPv2NK9FdWrappercviEv\"></span><span id=\"FdWrapper::castto-i-operatorC\"></span><span class=\"target\" id=\"classFdWrapper_1a948f8d54950bc4c8318ecd10b88adf55\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span><span class=\"k\"><span class=\"pre\">explicit</span></span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#breathe-section-title-friends\"]": "<p class=\"breathe-sectiondef-title rubric\" id=\"breathe-section-title-friends\">Friends<a class=\"headerlink\" href=\"#breathe-section-title-friends\" title=\"Permalink to this headline\">\u00b6</a></p>", "a[href=\"#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapper4swapER9FdWrapperR9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapper4swapER9FdWrapperR9FdWrapper\"></span><span id=\"FdWrapper::swap__FdWrapperR.FdWrapperR\"></span><span class=\"target\" id=\"classFdWrapper_1ae18e498ea5e0f56245f661e154bf496b\"></span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">swap</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second) noexcept\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\" title=\"FdWrapper::swap::first (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">first</span></span></a>, </span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second) noexcept\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\" title=\"FdWrapper::swap::second (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">second</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapper9FdWrapperEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapper9FdWrapperEv\">\n<span id=\"_CPPv3N9FdWrapper9FdWrapperEv\"></span><span id=\"_CPPv2N9FdWrapper9FdWrapperEv\"></span><span id=\"FdWrapper::FdWrapper\"></span><span class=\"target\" id=\"classFdWrapper_1ab184a54501ff2b5ccadc73fd8d05dd12\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">default</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapperaSERR9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapperaSERR9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapperaSERR9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapperaSERR9FdWrapper\"></span><span id=\"FdWrapper::assign-operator__FdWrapperRR\"></span><span class=\"target\" id=\"classFdWrapper_1a09888f76f6b34ac23c39dccae6d58270\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second) noexcept\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second) noexcept\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapperaSERR9FdWrapper\" title=\"FdWrapper::operator=::other (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">other</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapperaSERK9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapperaSERK9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapperaSERK9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapperaSERK9FdWrapper\"></span><span id=\"FdWrapper::assign-operator__FdWrapperCR\"></span><span class=\"target\" id=\"classFdWrapper_1a2b4b963a821824c8f2518bd99f44c580\"></span><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second) noexcept\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">=</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second) noexcept\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">delete</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapper9FdWrapperERR9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapper9FdWrapperERR9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapper9FdWrapperERR9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapper9FdWrapperERR9FdWrapper\"></span><span id=\"FdWrapper::FdWrapper__FdWrapperRR\"></span><span class=\"target\" id=\"classFdWrapper_1a1071085629a2837fb1d7f7409579e992\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"reference internal\" href=\"#_CPPv4N9FdWrapper9FdWrapperERR9FdWrapper\" title=\"FdWrapper::FdWrapper (C++ function)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper9FdWrapperERR9FdWrapper\" title=\"FdWrapper::FdWrapper::other (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">other</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">noexcept</span></span><br/></dt><dd></dd>", "a[href=\"#breathe-section-title-public-functions\"]": "<p class=\"breathe-sectiondef-title rubric\" id=\"breathe-section-title-public-functions\">Public Functions<a class=\"headerlink\" href=\"#breathe-section-title-public-functions\" title=\"Permalink to this headline\">\u00b6</a></p>", "a[href=\"#_CPPv4N9FdWrapper9FdWrapperERK9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapper9FdWrapperERK9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapper9FdWrapperERK9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapper9FdWrapperERK9FdWrapper\"></span><span id=\"FdWrapper::FdWrapper__FdWrapperCR\"></span><span class=\"target\" id=\"classFdWrapper_1aa4329095ad6acbf5cd6274693c0e2423\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"#_CPPv4N9FdWrapper9FdWrapperERK9FdWrapper\" title=\"FdWrapper::FdWrapper (C++ function)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"p\"><span class=\"pre\">&amp;</span></span></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">delete</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK9FdWrappermlEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK9FdWrappermlEv\">\n<span id=\"_CPPv3NK9FdWrappermlEv\"></span><span id=\"_CPPv2NK9FdWrappermlEv\"></span><span id=\"FdWrapper::mul-operatorC\"></span><span class=\"target\" id=\"classFdWrapper_1a10aec49f05a68e93923ff608ae998890\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">*</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4NK9FdWrapper3getEv\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK9FdWrapper3getEv\">\n<span id=\"_CPPv3NK9FdWrapper3getEv\"></span><span id=\"_CPPv2NK9FdWrapper3getEv\"></span><span id=\"FdWrapper::getC\"></span><span class=\"target\" id=\"classFdWrapper_1ab5a8ac0f66a1cca250c880f20e28995b\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">int</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">get</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapperD0Ev\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapperD0Ev\">\n<span id=\"_CPPv3N9FdWrapperD0Ev\"></span><span id=\"_CPPv2N9FdWrapperD0Ev\"></span><span id=\"FdWrapper::~FdWrapper\"></span><span class=\"target\" id=\"classFdWrapper_1a6137b18e313455bc0decda59905a44f0\"></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">~FdWrapper</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
