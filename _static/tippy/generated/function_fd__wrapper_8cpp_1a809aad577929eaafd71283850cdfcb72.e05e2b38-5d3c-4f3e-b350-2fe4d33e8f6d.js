selector_to_html = {"a[href=\"classFdWrapper.html#_CPPv49FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv49FdWrapper\">\n<span id=\"_CPPv39FdWrapper\"></span><span id=\"_CPPv29FdWrapper\"></span><span id=\"FdWrapper\"></span><span class=\"target\" id=\"classFdWrapper\"></span><span class=\"k\"><span class=\"pre\">class</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></span><br/></dt><dd></dd>", "a[href=\"#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapper4swapER9FdWrapperR9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapper4swapER9FdWrapperR9FdWrapper\"></span><span id=\"FdWrapper::swap__FdWrapperR.FdWrapperR\"></span><span class=\"target\" id=\"classFdWrapper_1a809aad577929eaafd71283850cdfcb72\"></span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-prename descclassname\"><a class=\"desctype reference internal\" href=\"classFdWrapper.html#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"p\"><span class=\"pre\">::</span></span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">swap</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"classFdWrapper.html#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"classFdWrapper.html#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\" title=\"FdWrapper::swap::first (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">first</span></span></a>, </span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"classFdWrapper.html#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"classFdWrapper.html#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\" title=\"FdWrapper::swap::second (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">second</span></span></a></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>", "a[href=\"classFdWrapper.html#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\">\n<span id=\"_CPPv3N9FdWrapper4swapER9FdWrapperR9FdWrapper\"></span><span id=\"_CPPv2N9FdWrapper4swapER9FdWrapperR9FdWrapper\"></span><span id=\"FdWrapper::swap__FdWrapperR.FdWrapperR\"></span><span class=\"target\" id=\"classFdWrapper_1a809aad577929eaafd71283850cdfcb72\"></span><span class=\"k\"><span class=\"pre\">friend</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">void</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">swap</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\" title=\"FdWrapper::swap::first (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">first</span></span></a>, </span><span class=\"sig-param-decl\"><a class=\"desctype reference internal\" href=\"#_CPPv49FdWrapper\" title=\"FdWrapper (C++ class) \u2014 Public Functions    FdWrapper() = default      FdWrapper(std::function&lt;int(void)&gt; open, std::function&lt;void(int)&gt; configure = nullptr, std::function&lt;void(int)&gt; close = nullptr)      ~FdWrapper()      FdWrapper(const FdWrapper&amp;) = delete      FdWrapper &amp;operator=(const FdWrapper&amp;) = delete      inline FdWrapper(FdWrapper &amp;&amp;other) noexcept      inline FdWrapper &amp;operator=(FdWrapper &amp;&amp;other) noexcept      inline explicit operator int() const      inline int operator*() const      inline int get() const    Friends    friend void swap(FdWrapper &amp;first, FdWrapper &amp;second)\"><span class=\"n\"><span class=\"pre\">FdWrapper</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4N9FdWrapper4swapER9FdWrapperR9FdWrapper\" title=\"FdWrapper::swap::second (C++ function parameter)\"><span class=\"n sig-param\"><span class=\"pre\">second</span></span></a></span><span class=\"sig-paren\">)</span><br/></dt><dd></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
