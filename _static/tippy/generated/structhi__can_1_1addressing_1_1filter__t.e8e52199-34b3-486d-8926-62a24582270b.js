selector_to_html = {"a[href=\"#_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-p-other\"]": "<dt id=\"_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-p-other\"><span class=\"k\">const</span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4N6hi_can10addressing8filter_tE\" title=\"hi_can::addressing::filter_t (C++ class) \u2014 Collaboration diagram for hi_can::addressing::filter_t:\"><span class=\"n\">filter_t</span></a><span class=\"w\"> </span><span class=\"p\">&amp;</span><span class=\"n sig-param sig-name\">other</span></dt><dd><p>Filter to compare against </p></dd>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t\">\n<span id=\"_CPPv3NK6hi_can10addressing8filter_tssERK8filter_t\"></span><span id=\"_CPPv2NK6hi_can10addressing8filter_tssERK8filter_t\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t_1ac0841232b28034a1d5fd726ace9c9c32\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">auto</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"k\"><span class=\"pre\">operator</span></span><span class=\"o\"><span class=\"pre\">&lt;=&gt;</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"#_CPPv4N6hi_can10addressing8filter_tE\" title=\"hi_can::addressing::filter_t (C++ class) \u2014 Collaboration diagram for hi_can::addressing::filter_t:\"><span class=\"n\"><span class=\"pre\">filter_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-p-other\" title=\"hi_can::addressing::filter_t::operator&lt;=&gt;::other (C++ function parameter) \u2014 Filter to compare against\"><span class=\"n sig-param\"><span class=\"pre\">other</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Compare two filters for sorting. </p><p>Compares by, in order:<ul class=\"simple\">\n<li><p>mask</p></li>\n<li><p>address</p></li>\n<li><p>shouldMatchRtr</p></li>\n<li><p>shouldMatchError More specific filters (greater masks) should be sorted first, and as such compare as less than, by flipping the comparison. </p></li>\n</ul>\n</p></dd>", "a[href=\"variable_namespacehi__can_1_1addressing_1a6372ba8ceb7b37c468fa77a3e86f123a.html#_CPPv4N6hi_can10addressing11MAX_ADDRESSE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing11MAX_ADDRESSE\">\n<span id=\"_CPPv3N6hi_can10addressing11MAX_ADDRESSE\"></span><span id=\"_CPPv2N6hi_can10addressing11MAX_ADDRESSE\"></span><span id=\"hi_can::addressing::MAX_ADDRESS__raw_address_t\"></span><span class=\"target\" id=\"namespacehi__can_1_1addressing_1a6372ba8ceb7b37c468fa77a3e86f123a\"></span><a class=\"desctype reference internal\" href=\"typedef_namespacehi__can_1_1addressing_1a1790497c7a43f6e573f400d4899ea5c1.html#_CPPv4N6hi_can10addressing13raw_address_tE\" title=\"hi_can::addressing::raw_address_t (C++ type) \u2014 A raw CAN address.\"><span class=\"n\"><span class=\"pre\">raw_address_t</span></span></a><span class=\"w\"> </span><span class=\"sig-prename descclassname\"><span class=\"n\"><span class=\"pre\">hi_can</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">addressing</span></span><span class=\"p\"><span class=\"pre\">::</span></span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MAX_ADDRESS</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0x1FFFFFFFUL</span></span><br/></dt><dd><p>The maximum value of a CAN address. </p></dd>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-parameters\"]": "<dt class=\"field-odd\" id=\"_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-parameters\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"></dd>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-parameters\"]": "<dt class=\"field-odd\" id=\"_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-parameters\">Parameters<span class=\"colon\">:</span></dt><dd class=\"field-odd\"></dd>", "a[href=\"structhi__can_1_1addressing_1_1flagged__address__t.html#_CPPv4N6hi_can10addressing17flagged_address_tE\"]": "<dt class=\"sig sig-object highlight sig-wrap cpp\" id=\"_CPPv4N6hi_can10addressing17flagged_address_tE\">\n<span id=\"_CPPv3N6hi_can10addressing17flagged_address_tE\"></span><span id=\"_CPPv2N6hi_can10addressing17flagged_address_tE\"></span><span id=\"hi_can::addressing::flagged_address_t\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1flagged__address__t\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">flagged_address_t</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">public</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">hi_can</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">addressing</span></span><span class=\"p\"><span class=\"pre\">::</span></span><a class=\"desctype reference internal\" href=\"structhi__can_1_1addressing_1_1structured__address__t.html#_CPPv4N6hi_can10addressing20structured_address_tE\" title=\"hi_can::addressing::structured_address_t (C++ class) \u2014 Inheritence diagram for hi_can::addressing::structured_address_t:\"><span class=\"n\"><span class=\"pre\">structured_address_t</span></span></a><br/></dt><dd><p>Inheritence diagram for hi_can::addressing::flagged_address_t:</p><p>Collaboration diagram for hi_can::addressing::flagged_address_t:</p><p>A CAN address with flags for RTR, error, and extended (29-bit) addressing. </p></dd>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t\">\n<span id=\"_CPPv3NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t\"></span><span id=\"_CPPv2NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t\"></span><span id=\"hi_can::addressing::filter_t::matches__flagged_address_tCRC\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t_1ae0100bc4efbcdcf3e6bf196f31915359\"></span><span class=\"k\"><span class=\"pre\">inline</span></span><span class=\"w\"> </span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">matches</span></span></span><span class=\"sig-paren\">(</span><span class=\"sig-param-decl\"><span class=\"k\"><span class=\"pre\">const</span></span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"structhi__can_1_1addressing_1_1flagged__address__t.html#_CPPv4N6hi_can10addressing17flagged_address_tE\" title=\"hi_can::addressing::flagged_address_t (C++ class) \u2014 Inheritence diagram for hi_can::addressing::flagged_address_t:\"><span class=\"n\"><span class=\"pre\">flagged_address_t</span></span></a><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">&amp;</span></span><a class=\"n sig-param reference internal\" href=\"#_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-p-address\" title=\"hi_can::addressing::filter_t::matches::address (C++ function parameter) \u2014 Address to check\"><span class=\"n sig-param\"><span class=\"pre\">address</span></span></a></span><span class=\"sig-paren\">)</span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">const</span></span><br/></dt><dd><p>Check if address matches the filter. </p></dd>", "a[href=\"variable_namespacehi__can_1_1addressing_1a7bfd19cb87264fd68ce01b05b6d9e82b.html#_CPPv4N6hi_can10addressing8MASK_ALLE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing8MASK_ALLE\">\n<span id=\"_CPPv3N6hi_can10addressing8MASK_ALLE\"></span><span id=\"_CPPv2N6hi_can10addressing8MASK_ALLE\"></span><span id=\"hi_can::addressing::MASK_ALL__mask_t\"></span><span class=\"target\" id=\"namespacehi__can_1_1addressing_1a7bfd19cb87264fd68ce01b05b6d9e82b\"></span><a class=\"desctype reference internal\" href=\"typedef_namespacehi__can_1_1addressing_1acd08f57a9d5d7a07492cd9c3ea3756ce.html#_CPPv4N6hi_can10addressing6mask_tE\" title=\"hi_can::addressing::mask_t (C++ type) \u2014 A raw CAN address mask.\"><span class=\"n\"><span class=\"pre\">mask_t</span></span></a><span class=\"w\"> </span><span class=\"sig-prename descclassname\"><span class=\"n\"><span class=\"pre\">hi_can</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">addressing</span></span><span class=\"p\"><span class=\"pre\">::</span></span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">MASK_ALL</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"m\"><span class=\"pre\">0x1FFFFFFFUL</span></span><br/></dt><dd><p>Mask for all bits in a CAN address. </p></dd>", "a[href=\"#_CPPv4N6hi_can10addressing8filter_t16shouldMatchErrorE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing8filter_t16shouldMatchErrorE\">\n<span id=\"_CPPv3N6hi_can10addressing8filter_t16shouldMatchErrorE\"></span><span id=\"_CPPv2N6hi_can10addressing8filter_t16shouldMatchErrorE\"></span><span id=\"hi_can::addressing::filter_t::shouldMatchError__b\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t_1a8b8a3fc96943f394ff5f31a218c8600f\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shouldMatchError</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">true</span></span><br/></dt><dd><p>Whether to match the isError flag as well. </p></dd>", "a[href=\"#breathe-section-title-public-functions\"]": "<p class=\"breathe-sectiondef-title rubric\" id=\"breathe-section-title-public-functions\">Public Functions<a class=\"headerlink\" href=\"#breathe-section-title-public-functions\" title=\"Permalink to this headline\">\u00b6</a></p>", "a[href=\"typedef_namespacehi__can_1_1addressing_1acd08f57a9d5d7a07492cd9c3ea3756ce.html#_CPPv4N6hi_can10addressing6mask_tE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing6mask_tE\">\n<span id=\"_CPPv3N6hi_can10addressing6mask_tE\"></span><span id=\"_CPPv2N6hi_can10addressing6mask_tE\"></span><span id=\"hi_can::addressing::mask_t\"></span><span class=\"target\" id=\"namespacehi__can_1_1addressing_1acd08f57a9d5d7a07492cd9c3ea3756ce\"></span><span class=\"k\"><span class=\"pre\">typedef</span></span><span class=\"w\"> </span><a class=\"desctype reference external\" href=\"https://en.cppreference.com/w/c/types/integer\" title=\"uint32_t (C standard type alias)\"><span class=\"n\"><span class=\"pre\">uint32_t</span></span></a><span class=\"w\"> </span><span class=\"sig-prename descclassname\"><span class=\"n\"><span class=\"pre\">hi_can</span></span><span class=\"p\"><span class=\"pre\">::</span></span><span class=\"n\"><span class=\"pre\">addressing</span></span><span class=\"p\"><span class=\"pre\">::</span></span></span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">mask_t</span></span></span><br/></dt><dd><p>A raw CAN address mask. </p></dd>", "a[href=\"#_CPPv4N6hi_can10addressing8filter_t4maskE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing8filter_t4maskE\">\n<span id=\"_CPPv3N6hi_can10addressing8filter_t4maskE\"></span><span id=\"_CPPv2N6hi_can10addressing8filter_t4maskE\"></span><span id=\"hi_can::addressing::filter_t::mask__mask_t\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t_1a661285d68652bd23edea64341bfe4218\"></span><a class=\"desctype reference internal\" href=\"typedef_namespacehi__can_1_1addressing_1acd08f57a9d5d7a07492cd9c3ea3756ce.html#_CPPv4N6hi_can10addressing6mask_tE\" title=\"hi_can::addressing::mask_t (C++ type) \u2014 A raw CAN address mask.\"><span class=\"n\"><span class=\"pre\">mask_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">mask</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"variable_namespacehi__can_1_1addressing_1a7bfd19cb87264fd68ce01b05b6d9e82b.html#_CPPv4N6hi_can10addressing8MASK_ALLE\" title=\"hi_can::addressing::MASK_ALL (C++ member) \u2014 Mask for all bits in a CAN address.\"><span class=\"n\"><span class=\"pre\">MASK_ALL</span></span></a><br/></dt><dd><p>The mask of address bits to care about. </p></dd>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-p-address\"]": "<dt id=\"_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-p-address\"><span class=\"k\">const</span><span class=\"w\"> </span><a class=\"desctype reference internal\" href=\"structhi__can_1_1addressing_1_1flagged__address__t.html#_CPPv4N6hi_can10addressing17flagged_address_tE\" title=\"hi_can::addressing::flagged_address_t (C++ class) \u2014 Inheritence diagram for hi_can::addressing::flagged_address_t:\"><span class=\"n\">flagged_address_t</span></a><span class=\"w\"> </span><span class=\"p\">&amp;</span><span class=\"n sig-param sig-name\">address</span></dt><dd><p>Address to check </p></dd>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-returns\"]": "<dt class=\"field-even\" id=\"_CPPv4NK6hi_can10addressing8filter_t7matchesERK17flagged_address_t-returns\">Returns<span class=\"colon\">:</span></dt><dd class=\"field-even\"><p>Whether the address matches the filter </p></dd>", "a[href=\"#_CPPv4N6hi_can10addressing8filter_tE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing8filter_tE\">\n<span id=\"_CPPv3N6hi_can10addressing8filter_tE\"></span><span id=\"_CPPv2N6hi_can10addressing8filter_tE\"></span><span id=\"hi_can::addressing::filter_t\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t\"></span><span class=\"k\"><span class=\"pre\">struct</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">filter_t</span></span></span><br/></dt><dd><p>Collaboration diagram for hi_can::addressing::filter_t:</p><p>A CAN address and mask for filtering, as well as whether to match RTR and error frames. </p></dd>", "a[href=\"#_CPPv4N6hi_can10addressing8filter_t14shouldMatchRtrE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing8filter_t14shouldMatchRtrE\">\n<span id=\"_CPPv3N6hi_can10addressing8filter_t14shouldMatchRtrE\"></span><span id=\"_CPPv2N6hi_can10addressing8filter_t14shouldMatchRtrE\"></span><span id=\"hi_can::addressing::filter_t::shouldMatchRtr__b\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t_1ad7f9cccd18bdcad3ad3e82f7c9351fce\"></span><span class=\"kt\"><span class=\"pre\">bool</span></span><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">shouldMatchRtr</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><span class=\"k\"><span class=\"pre\">false</span></span><br/></dt><dd><p>Whether to match the RTR flag as well. </p></dd>", "a[href=\"#breathe-section-title-public-members\"]": "<p class=\"breathe-sectiondef-title rubric\" id=\"breathe-section-title-public-members\">Public Members<a class=\"headerlink\" href=\"#breathe-section-title-public-members\" title=\"Permalink to this headline\">\u00b6</a></p>", "a[href=\"#_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-returns\"]": "<dt class=\"field-even\" id=\"_CPPv4NK6hi_can10addressing8filter_tssERK8filter_t-returns\">Returns<span class=\"colon\">:</span></dt><dd class=\"field-even\"><p>The result of the comparison </p></dd>", "a[href=\"#_CPPv4N6hi_can10addressing8filter_t7addressE\"]": "<dt class=\"sig sig-object highlight cpp\" id=\"_CPPv4N6hi_can10addressing8filter_t7addressE\">\n<span id=\"_CPPv3N6hi_can10addressing8filter_t7addressE\"></span><span id=\"_CPPv2N6hi_can10addressing8filter_t7addressE\"></span><span id=\"hi_can::addressing::filter_t::address__flagged_address_t\"></span><span class=\"target\" id=\"structhi__can_1_1addressing_1_1filter__t_1a7f60d3054d3152f97d34c3c2dc0bb5a3\"></span><a class=\"desctype reference internal\" href=\"structhi__can_1_1addressing_1_1flagged__address__t.html#_CPPv4N6hi_can10addressing17flagged_address_tE\" title=\"hi_can::addressing::flagged_address_t (C++ class) \u2014 Inheritence diagram for hi_can::addressing::flagged_address_t:\"><span class=\"n\"><span class=\"pre\">flagged_address_t</span></span></a><span class=\"w\"> </span><span class=\"sig-name descname\"><span class=\"n\"><span class=\"pre\">address</span></span></span><span class=\"w\"> </span><span class=\"p\"><span class=\"pre\">=</span></span><span class=\"w\"> </span><a class=\"reference internal\" href=\"variable_namespacehi__can_1_1addressing_1a6372ba8ceb7b37c468fa77a3e86f123a.html#_CPPv4N6hi_can10addressing11MAX_ADDRESSE\" title=\"hi_can::addressing::MAX_ADDRESS (C++ member) \u2014 The maximum value of a CAN address.\"><span class=\"n\"><span class=\"pre\">MAX_ADDRESS</span></span></a><br/></dt><dd><p>The address to accept. </p></dd>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
